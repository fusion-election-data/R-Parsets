install.packages("KernSmooth")
library kernsmooth
library (KernSmooth)
library(datasets)
data(iris)
summary (iris)
lapply (iris [virginica, Sepal.Width], mean)
lapply (iris ["virginica", "Sepal.Width"], mean)
lapply (iris ["virginica", "Sepal.Width"], FUN = mean)
apply (iris ["virginica", "Sepal.Width"], 2, FUN = mean)
apply (iris [virginica, Sepal.Width], 2, FUN = mean)
apply (iris [virginica [Sepal.Width]], 2, FUN = mean)
lapply (iris ["virginica", "Sepal.Width"], mean)
iris$Sepal.Length[iris$Species=="virginica"]
test<-iris$Sepal.Length[iris$Species=="virginica"]
mean (test)
head (iris)
apply(iris[Species==virginica, 1], 2, mean)
apply(iris[, 1[Species=="virginica"]], 2, mean)
apply(iris[, 1[iris$Species=="virginica"]], 2, mean)
apply(iris[(iris$Species=="virginica"), 1], 2, mean)
library(datasets)
data(mtcars)
apply(mtcars, 2, mean)
apply (iris, 2, mean)
library (iris)
library(datasets)
data(iris)
apply (iris, 2, mean)
apply (iris [ ,1:4], 2, mean)
apply (iris [Species==virginica, 1:4], 2, mean)
apply (iris [iris$Species==virginica, 1:4], 2, mean)
apply (iris [, 1:4 [iris$Species==virginica]], 2, mean)
apply (iris [, 1:4 [Species==virginica]], 2, mean)
apply (iris [, [Species==virginica], 2, mean)
apply (iris [, (Species==virginica), 2, mean)
apply (iris [ ,[Species==virginica]], 2, mean)
library (swirl)
swirl()
x
x [1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y [y>0]
x [x>0]
x[!is.na(x) & x>0]
x [xc(3,5,7)]
x [c(x[3], x[5], x[7])]
x[c(x[3], x[5], x[7])]
x (c(3,5,7))
x[c(3,5,7)]
x[0]
x [3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names (vect)
vect2 with c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim (my_vector)
length (my_vector)
dim(my_vector) <- c(4, 5)
dim (my_vector)
attributes (my_vector)
my_vector
class()
class (my_vector)
my_matrix<-my_vector
?matrix
matrix (1:20, 4, 5)
my_matrix2<-matrix (1:20, 4, 5)
identical (my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class (my_data)
cnames <- (c("patient", "age", "weight", "bp", "rating", "test"))
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames (my_data, cnames)
colnames (mydata) <- cnames
colnames (my_data) <- cnames
my_data
http://s3.amazonaws.com/practice_assignment/diet_data.zip
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
length (andy$Day)
andy <- read.csv("diet_data/Andy.csv")
head(andy)
andy [1, "Weight"]
andy [andy$Weight, 1]
andy [andy$Weight [1]]
andy [andy$Weight [1],]
andy [1, andy$Weight]
andy [30, "Weight"]
data (iris)
subset <- iris[which (iris$Species == "virginica"), "Sepal.Length"]
head (subset)
apply (iris[which (iris$Species == "virginica"), "Sepal.Length"], 2, mean)
apply (subset, 2, mean)
dim (subset)
mean (subset)
apply (iris, 2, mean)
apply (iris["Species"=="virginica"),1:4])
apply (iris[("Species"=="virginica"),1:4])
apply (iris[("Species"=="virginica"),1:4], mean)
apply (iris[("Species"=="virginica"),1:4], 2, mean)
iris$species
iris$Species
y<- iris[iris$species == "virginica"]
y
y<- iris[iris$species == "virginica", ]
y
y<- iris[, iris$species == "virginica"]
y
y<- iris[iris$Species == "virginica"]
y<- iris[iris$Species == "virginica",]
y
apply (iris[iris$Species == "virginica",], 2, mean)
apply (iris[iris$Species == "virginica"], 2, mean)
apply (iris[iris$Species == "virginica", ], 2, mean)
apply (iris[iris$Species == "virginica",], 2, mean)
apply (iris, 2, mean)
apply (iris[1:4], 2, mean)
apply (iris[iris$Species == "virginica", 1:4], 2, mean)
library(datasets)
data(mtcars)
summary (mtcars)
head (mtcars)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply (mtcars$hp, mean)
answer <- tapply (mtcars$hp, mtcars$cyl, mean)
difference <-answer[1] - answer[2]
difference
difference <- abs(answer[1] - answer[2])
difference
debug(ls)
ls
ls ()
*
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
answer <-sapply(split(mtcars$hp, mtcars$cyl), mean)
answer
class (answer)
difference <- abs(answer[1] - answer[8])
difference
difference <- abs(answer[1] - answer[3])
difference
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with (mtcars, tapply(hp, cyl, mean))
answer <- with (mtcars, tapply(hp, cyl, mean))
answer
difference <- abs(answer[1] - answer [3])
difference
x<- c(rnorm(10), runif (10), rnorm (10,1))
f <- gl(3, 10)
tapply (x, f, range)
library (datasets)
data (iris)
head (iris)
tapply (Petal.Length, Species, mean)
tapply (Petal.Length, Species, mean)
with (iris, tapply(Petal.Length, Species, mean)
)
with (iris, tapply (Sepal.Length, Species, mean))
within (iris, tapply(Sepal.Length, Species, mean))
apply (iris[iris$Species=="virginica", 1:4], 2, mean)
apply (iris[iris$Species, 1:4], 2, mean)
colMeans(iris$Sepal.Length)
colMeans (iris[iris$Sepal.Length])
colMeans (iris[, iris$Sepal.Length])
colMeans (iris[1])
apply (iris[1:4], 2, mean)
apply (iris[, iris$Sepal.Length], 2, mean)
apply (iris[iris$Sepal.Length], 2, mean)
apply (iris[which(,iris$Sepal.Length)], 2, mean)
library (plyr)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot (y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
summaryRprof(lm)
summaryRprof(lm)
summaryRprof(){lm}
summaryRprof(lm)
summaryRprof()
lm()
library(datasets)
Rprof()
summaryRprof(fit <- lm(y ~ x1 + x2))
summaryRprof(fit <- lm())
summaryRprof(lm())
summaryRprof(lm
)
summaryRprof(lm)
swirl()
library (swirl)
swirl()
play()
head (flags)
nxt()
sapply (flags, unique)
vapply(flags, unique, numeric(1))
ok
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class (plants)
dim (plants)
nrow(plantws)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head (plants)
head (plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str (plants)
?sample
sample(1:6, 4, replace =TRUE)
sample(1:6, 4, replace =TRUE)
sample(1:20, replace =FALSE)
sample(1:20, 10)
letters
LETTERS
sample (LETTERS)
flips<-sample(c(0,1), 100, replacement=TRUE, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace =TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(10, mean=10)
rpois(5)
rpois(5, lambda=10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-sys.time()
t1<-Sys.time()
t1
class (t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
t1-Sys.time()
Sys.time() - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(jsonlite)
jsondata<-FromJSON(https://api.github.com/users/jtleek/repos)
jsondata<-fromJSON("https://api.github.com/users/jtleek/repos")
head(jsondata)
names(jsondata)
jsondata[45]
View(jsondata)
View(jsondata)
jsondata[1, ]
jsondata[1, "full name"]
jsondata[1, "full_name"]
jsondata[1:5, "full_name"]
find(jsondata, "clean", mode = "any", numeric = FALSE, simple.words = TRUE)
find(jsondata, what="clean", mode = "any", numeric = FALSE, simple.words = TRUE)
names(jsondata$owner)
names(jasondata[ ,"owner"])
names(jsondata[ ,"owner"])
names(jsondata[[ ,"type"])]
names(jsondata[[ ,"type"]]
)
names(jsondata[,["type"]])
jsondata$owner$type
jsondata$owner$login
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character",                                                         "factor", "numeric", "numeric"))head(pollution)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
head(data)
head(spam)
str(spam[,1:5])
setseed()
set.seed()
set.seed(1)
trainIndicator = rbinom(4601, size=1, prob=0.5)
trainIndicator = rbinom(4601, size=2, prob=0.5)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]testSpam = spam[trainIndicator == 0, ]
trainSpam = spam[trainIndicator == 1, ]testSpam = spam[trainIndicator == 0, ]
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
plot(log10(trainSpam[, 1:4]))
plot(log10(trainSpam[, 1:4]+1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
length(names(trainSpam))
head(trainSpam)
trainSpam[,1]
trainSpam[,58]
hCluster = dist(t(trainSpam[, 1:57]))
plot(hCluster)
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
name(trainSpam[,56])
names(trainSpam[,56])
head(trainSpam[,56])
names(trainSpam)
hCluster = dist(t(trainSpam[, 1:57]))
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
length(names(trainSpam))
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
cvError
library(boot)
for (i in 1:55) {    lmFormula = reformulate(names(trainSpam)[i], response = "numType")    glmFit = glm(lmFormula, family = "binomial", data = trainSpam)    cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
for (i in 1:55) {    lmFormula = reformulate(names(trainSpam)[i], response = "numType")    glmFit = glm(lmFormula, family = "binomial", data = trainSpam)    cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
for (i in 1:55) {    lmFormula = reformulate(names(trainSpam)[i], response = "numType")    glmFit = glm(lmFormula, family = "binomial", data = trainSpam)    cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
?boot
library(dplyr)
library(ggplot2)
library(ggparallel)
scrapestatus<-read.csv("data/2016_01_08_scraping_status.csv", check.names=TRUE)
cmc<-read.csv("data/2016_01_05_candidates_mentioning_candidates.csv")
setwd("~/Documents/99Antennas/Client Files/Fusion/R-Parsets")
# assign source names to candidates by acct
# assign source party affiliation
dim(cmc) #get dims of original data
labels<-select(scrapestatus, Name, Party.Affiliation, Twitter)
names(labels)<-c("source_name", "source_party", "source_account")
labels$source_account<-tolower(labels$source_account)
cmc<-left_join(cmc, labels, by =c("source" = "source_account"))
dim(cmc) #check dims
scrapestatus<-read.csv("data/2016_01_08_scraping_status.csv", check.names=TRUE)
cmc<-read.csv("data/2016_01_05_candidates_mentioning_candidates.csv")
# assign source names to candidates by acct
# assign source party affiliation
dim(cmc) #get dims of original data
labels<-select(scrapestatus, Name, Party.Affiliation, Twitter)
names(labels)<-c("source_name", "source_party", "source_account")
labels$source_account<-tolower(labels$source_account)
cmc<-left_join(cmc, labels, by =c("source" = "source_account"))
dim(cmc) #check dims
View(cmc)
cmc2<-filter(cmc, target!="joebiden")
View(cmc2)
# remove noncandidates
cmc<-filter(cmc, target!="joebiden")
# assign source names to candidates by acct
# assign source party affiliation
dim(cmc) #get dims of original data
labels<-select(scrapestatus, Name, Party.Affiliation, Twitter)
names(labels)<-c("source_name", "source_party", "source_account")
labels$source_account<-tolower(labels$source_account)
cmc<-left_join(cmc, labels, by =c("source" = "source_account"))
dim(cmc) #check dims
# assign target names to candidates by acct
# assign target party affiliation
names(labels)<-c("target_name", "target_party", "target_account")
cmc<-left_join(cmc, labels, by =c("target" = "target_account"))
dim(cmc) #check dims
#Filter data to exclude observations of candidates mentioning themselves
c_at_c<-cmc[cmc$source_name != cmc$target_name, ]
dim(c_at_c) #check dims
tot_mentions<-sum(c_at_c$mentions)
tot_mentions
#Get table of mentions by source in descending order
src_agg<-aggregate(mentions ~ source_name, data=c_at_c, sum)
src_agg_sorted<-arrange(src_agg, desc(mentions))
head(src_agg_sorted)
tail(src_agg_sorted)
#Get table of mentions by target in descending order
trg_agg<-aggregate(mentions ~ target_name, data=c_at_c, sum)
trg_agg_sorted<-arrange(trg_agg, desc(mentions))
head(trg_agg_sorted)
tail(trg_agg_sorted)
#Get table of mentions by source_party in descending order
src_party<-aggregate(mentions ~ source_party, data=c_at_c, sum)
src_party
#Get table of mentions by target_party in descending order
trg_party<-aggregate(mentions ~ target_party, data=c_at_c, sum)
trg_party
View(cmc)
#Filter data to exclude observations of candidates mentioning themselves
c_at_c<-cmc[cmc$source_name != cmc$target_name, ]
dim(c_at_c) #check dims
c_at_c<-cmc[cmc$source_name != cmc$target_name, ]
table(class,cmc)
table (class(cmc))
# remove noncandidates
cmc<-filter(cmc, target!="joebiden")
# assign source names to candidates by acct
# assign source party affiliation
dim(cmc) #get dims of original data
labels<-select(scrapestatus, Name, Party.Affiliation, Twitter)
names(labels)<-c("source_name", "source_party", "source_account")
labels$source_account<-tolower(labels$source_account)
cmc<-left_join(cmc, labels, by =c("source" = "source_account"))
dim(cmc) #check dims
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
least_mention_agg<-aggregate(mentions ~ target_name, data=least_catty_subset, sum)
mention_agg
least_per_tot<-sum(least_mention_agg$mentions)/sum(tot_mention_agg$mentions)
least_per_tot
least_src_mention_agg<-aggregate(mentions ~ source_name, data=least_catty_subset, sum)
least_src_mention_agg
View(least_src_mention_agg)
least_mention_agg<-aggregate(mentions ~ target_name, data=least_catty_subset, sum)
least_mention_agg
least_per_tot<-sum(least_mention_agg$mentions)/sum(tot_mention_agg$mentions)
least_per_tot
least_src_mention_agg<-aggregate(mentions ~ source_name, data=least_catty_subset, sum)
least_src_mention_agg
View(least_mention_agg)
View(least_catty_subset)
View(c_at_self_sorted)
View(c_at_self_sorted[5,])
View(c_at_self_sorted[1:5,])
View(c_at_self_sorted[1:5, c(4,3)])
